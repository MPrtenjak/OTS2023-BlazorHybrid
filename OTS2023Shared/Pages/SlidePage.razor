@page "/{slideID:int?}"

@implements IAsyncDisposable

@layout MainLayout

@inject HttpClient Http
@inject NavigationManager nm
@inject IBlazor blazorType

@using System.Xml.Linq
@using System.Xml.Serialization
@using System.Xml.XPath
@using System.Diagnostics;

@if (slides.Count > 0)
{
  <div class="d-flex justify-content-between flex-wrap animate__animated @captionAnimation">
    <span style="font-size: 75%; font-weight: 500;color: red;" class="me-2">
      [@(currentSlide + 1)].
    </span>
    <span style="font-size: 120%; font-weight: 900;color: red;">
      @slides[currentSlide].Caption
    </span>
    <span>
      <button id="zoomOut" class="btn btn-primary me-2" @onclick="zoomOut"><span class="oi oi-zoom-out"></span></button>
      <button id="percent" class="btn btn-primary me-2">@fontSizePercent</button>
      <button id="zoomIn" class="btn btn-primary me-5" @onclick="zoomIn"><span class="oi oi-zoom-in"></span></button>

      <button id="goBack" class="btn btn-primary me-2" @onclick="doPrevious" disabled="@CanNotGoBack"><span class="oi oi-media-skip-backward"></span></button>
      <button id="goFwd" class="btn btn-primary me-2" @onclick="doNext" disabled="@CanNotGoForward"><span class="oi oi-media-skip-forward"></span></button>
    </span>
  </div>
  <hr />

  <div class="animate__animated @slideAnimation">
    <DynamicComponent Type="@slides[currentSlide].SlideComponent" Parameters="@slideParameters()" />
  </div>
}

@code {
  [Parameter] public int? slideID { get; set; }

  // private List<SlideDTO> slides = new List<SlideDTO>();
  private SlideCollection slides = new SlideCollection();
  private int currentSlide = 0;
  private int direction = 1;
  private int fontSize = 100;

  private bool CanGoBack => (currentSlide > 0);
  private bool CanGoForward => (currentSlide < slides.Count - 1);
  private bool CanNotGoBack => !CanGoBack;
  private bool CanNotGoForward => !CanGoForward;
  private string fontSizePercent => $"{fontSize}%";
  private Dictionary<string, Action> keys2Action = new();

  private GestureEventInterop? customEventInterop { get; set; }
  private RunExampleEventInterop? runExampleEventInterop { get; set; }

  string slideAnimation { get; set; } = "animate__slideInRight";
  string captionAnimation { get; set; } = "animate__slideInDown";

  protected override async Task OnInitializedAsync()
  {
    var xmlResult = await blazorType.ReadSlideData();
    slides.Add(xmlResult);
    slides.CurrentLanguage = Language.En;

    currentSlide = (slideID.HasValue && slideID.Value >= 1 && slideID.Value <= slides.Count)
      ? (slideID.Value - 1) : 0;

    messageBroker.KeyboardEvent += NewKeyboardEvent;

    var fs = await JS.GetFromLocalStorage("fontSize");
    fontSize = (string.IsNullOrWhiteSpace(fs)) ? 100 : int.Parse(fs);
    messageBroker.NotifyZoomChanged(fontSize);

    keys2Action = new Dictionary<string, Action>()
      {
        { "ArrowRight", doNext },
        { "PageUp", doNext },
        { "swipeleft", doNext },

        { "ArrowLeft", doPrevious },
        { "PageDown", doPrevious },
        { "swiperight", doPrevious },

        { "AudioVolumeUp", zoomIn },
        { "i", zoomIn },

        { "AudioVolumeDown", zoomOut },
        { "o", zoomOut },
      };
  }

  public void Dispose()
  {
    messageBroker.KeyboardEvent -= NewKeyboardEvent;
  }

  private IDictionary<string, object> slideParameters()
  {
    return new Dictionary<string, object>()
    {
      { "SlideData", slides[currentSlide] },
    };
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (!firstRender)
      return;

    customEventInterop = new(JS);
    await customEventInterop.SetupGestureEventCallback(args => handleGestures(args));

    runExampleEventInterop = new(JS);
    await runExampleEventInterop.SetupRunExampleEventCallback(args => handleRunExample(args));
  }

  public async ValueTask DisposeAsync()
  {
    if (customEventInterop is not null)
      await customEventInterop.TearDownGestureEventCallback();

    if (runExampleEventInterop is not null)
      await runExampleEventInterop.TearDownRunExampleEventCallback();
  }

  public async void zoomOut()
  {
    if (fontSize > 30)
      await changeFontSize(-10);
  }

  public async void zoomIn()
  {
    await changeFontSize(10);
  }

  private async Task changeFontSize(int delta)
  {
    direction = 0;
    fontSize += delta;
    await JS.SetInLocalStorage("fontSize", fontSize.ToString());
    messageBroker.NotifyZoomChanged(fontSize);
    StateHasChanged();
  }

  private void doPageSlide(int offset)
  {
    currentSlide += offset;
    direction = (offset < 0) ? -1 : 1;
    StateHasChanged();
    JS.ChangeURL($"{currentSlide + 1}");

    slideAnimation = (direction > 0) ? "animate__slideInRight" : "animate__slideInLeft";
    captionAnimation = (direction > 0) ? "animate__slideInDown" : "animate__slideInUp";
    Task.Run(async () =>
    {
      await Task.Delay(1000);
      await InvokeAsync(() =>
      {
        slideAnimation = "none";
        captionAnimation = "none";
        StateHasChanged();
      });
    });
  }

  public void doPrevious()
  {
    if (CanGoBack)
      doPageSlide(-1);
  }

  public void doNext()
  {
    if (CanGoForward)
      doPageSlide(+1);
  }

  private void executeInputAction(string action)
  {
    if (keys2Action.ContainsKey(action))
      keys2Action[action]();
  }

  private Task handleGestures(string args)
  {
    executeInputAction(args);

    return Task.CompletedTask;
  }

  private Task handleRunExample(string exampleKey)
  {
    blazorType.RunExternalExample(exampleKey);

    return Task.CompletedTask;
  }

  private void NewKeyboardEvent(object? sender, KeyboardEventArgs e)
  {
    executeInputAction(e.Key);
  }
}