@inherits LayoutComponentBase

<div class="page">
  <div id="keyCatcher" tabindex="-1" style="outline: none;" @onkeydown="e => KeyDown(e)">
    <main>
      <h6>OTS2023 - Blazor Hybrid - Prtenjak</h6>

      <hr />

      <h1 class="text-center">@caption</h1>

      <hr />

      <article class="content px-4">
        @Body
      </article>
    </main>
  </div>
</div>

@code {
  private Dictionary<string, Action>? keys2Action;
  private string caption = "";

  private string[] pages = new string[] {
    "/",
    "counter",
    "compare"
  };
  private int pageIndex = 0;

  protected override void OnInitialized()
  {
    base.OnInitialized();

    navManager.NavigateTo("compare");
    /*
    messageBroker.CaptionChangedEvent += CaptionChanged;
    messageBroker.PrevPageEvent += MoveToPreviousPage;
    messageBroker.NextPageEvent += MoveToNextPage;

    keys2Action = new Dictionary<string, Action>()
      {
        { "ArrowRight", moveNext },
        { "PageUp", moveNext },
        { "swipeleft", moveNext },

        { "ArrowLeft", movePrevious },
        { "PageDown", movePrevious },
        { "swiperight", movePrevious },

        { "AudioVolumeUp", zoomIn },
        { "AudioVolumeDown", zoomOut },
      };
    */
  }

  public void Dispose()
  {
    messageBroker.CaptionChangedEvent -= CaptionChanged;
    messageBroker.PrevPageEvent -= MoveToPreviousPage;
    messageBroker.NextPageEvent -= MoveToNextPage;
  }

  private void CaptionChanged(object? sender, PageCaptionArgs pca)
  {
    caption = pca.Caption;
    StateHasChanged();
  }

  private void MoveToPreviousPage(object? sender, EventArgs args)
  {
    DecrementPage();
    StateHasChanged();
    ShowPage();
  }

  private void MoveToNextPage(object? sender, EventArgs args)
  {
    IncrementPage();
    StateHasChanged();
    ShowPage();
  }

  private void IncrementPage() =>
    pageIndex = (pageIndex >= pages.Length - 1)
      ? pages.Length - 1 : pageIndex + 1;

  private void DecrementPage() =>
    pageIndex = (pageIndex > 0)
      ? pageIndex - 1 : 0;

  private void ShowPage() =>
    navManager.NavigateTo(pages[pageIndex]);

  public void movePrevious() => MoveToPreviousPage(null, new EventArgs());

  public void moveNext() => MoveToNextPage(null, new EventArgs());

  private void KeyDown(KeyboardEventArgs e)
  {
    messageBroker.NotifyNewKeyboardEvent(e);
    /*
     * 
    _ = JS.InvokeVoidAsync("console.log", "key press");
    executeInputAction(e.Key);
    */
  }

  private void executeInputAction(string action)
  {
    if (keys2Action!.ContainsKey(action))
      keys2Action![action]();
  }
}